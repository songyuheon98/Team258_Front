plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

jar {
	enabled = false
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.json:json:20190722'
	//SpringBoot AOP
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	// Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	//implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'javax.servlet:javax.servlet-api:4.0.1'

	// Test
	implementation 'org.springframework.boot:spring-boot-starter-test:3.1.2'
	implementation 'com.h2database:h2:2.1.214'
	implementation 'org.springframework.security:spring-security-test:6.1.2'
	implementation 'org.mockito:mockito-core:5.4.0'
	implementation 'com.seoduct:logback-slack-appender:1.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	testImplementation 'org.mockito:mockito-inline:5.2.0'
	implementation 'org.mockito:mockito-inline:5.2.0'

	testImplementation 'com.h2database:h2:2.1.214'
	testImplementation 'org.springframework.security:spring-security-test:6.1.2'
	testImplementation 'junit:junit:4.13.1'
	// JWT
	compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

	// JPA 설정
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// MySQL
	implementation 'mysql:mysql-connector-java:8.0.25'

	// QueryDSL Implementation
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// slack logback
	implementation 'com.github.maricn:logback-slack-appender:1.4.0'

	// websocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	testImplementation 'org.springframework.boot:spring-boot-starter-websocket'
	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'


	// 231008 로깅 레벨 설정을 위한 의존성
	implementation 'org.springframework.boot:spring-boot-starter-logging'

	// 단위 테스트
	implementation 'org.springframework:spring-test'

	// Query Dsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	// Kafka
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.apache.kafka:kafka-clients'


	// json Trouble Shooting
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.5'

}

tasks.named('test') {
	useJUnitPlatform()
}

//QueryDSL Build Options
def querydslDir = "src/main/generated"

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
	file(querydslDir).deleteDir()
}
